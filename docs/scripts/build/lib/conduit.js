(function(e,t){typeof module=="object"&&module.exports?module.exports=t():typeof define=="function"&&define.amd?define([],t(e)):e.Conduit=t(e)})(this,function(e,t){function n(e){if(typeof e.target!="function")throw new Error("You can only make functions into Conduits.");var t={pre:e.pre||[],post:e.post||[],all:[]},n=e.context,r=e.target,i={isTarget:!0,fn:e.sync?function(){var e=Array.prototype.slice.call(arguments,0),t=r.apply(n,e);return t}:function(e){var t=Array.prototype.slice.call(arguments,1);t.splice(1,1,r.apply(n,t)),e.apply(this,t)}},s=function(){t.all=t.pre.concat([i].concat(t.post))};s();var o=function(){var r=0,i,s,o=function u(){var o=Array.prototype.slice.call(arguments,0),a=r,f,l;r+=1,a<t.all.length&&(f=t.all[a],s=s==="target"?"after":f.isTarget?"target":"before",e.sync?s==="before"?(l=f.fn.apply(f.context||n,o),u.apply(this,l||o)):(i=f.fn.apply(f.context||n,o)||i,u.apply(this,[i].concat(o))):f.fn.apply(f.context||n,[u].concat(o)))};return o.apply(this,arguments),i};return o.steps=function(){return t.all},o.context=function(e){if(arguments.length===0)return n;n=e},o.before=function(e,n){e=typeof e=="function"?{fn:e}:e,n=n||{},n.prepend?t.pre.unshift(e):t.pre.push(e),s()},o.after=function(e,n){e=typeof e=="function"?{fn:e}:e,n=n||{},n.prepend?t.post.unshift(e):t.post.push(e),s()},o.clear=function(){t={pre:[],post:[],all:[]},s()},o.target=function(e){return e&&(r=e),r},o}return{Sync:function(e){return e.sync=!0,n.call(this,e)},Async:function(e){return n.call(this,e)}}});